import {
  c,
  r,
  s
} from "./chunk-HA2BHINR.js";
import {
  __publicField
} from "./chunk-TKZWA4SW.js";

// node_modules/get-it/dist/middleware.browser.js
function n(e) {
  return {};
}
var r2 = /^\//;
var o = /\/$/;
function i(e) {
  const t = e.replace(o, "");
  return { processOptions: (e2) => {
    if (/^https?:\/\//i.test(e2.url)) return e2;
    const s2 = [t, e2.url.replace(r2, "")].join("/");
    return Object.assign({}, e2, { url: s2 });
  } };
}
var a;
var c2;
var u = { exports: {} };
function l() {
  if (c2) return a;
  c2 = 1;
  var e = 1e3, t = 60 * e, s2 = 60 * t, n2 = 24 * s2, r3 = 7 * n2, o2 = 365.25 * n2;
  function i2(e2, t2, s3, n3) {
    var r4 = t2 >= 1.5 * s3;
    return Math.round(e2 / s3) + " " + n3 + (r4 ? "s" : "");
  }
  return a = function(a2, c3) {
    c3 = c3 || {};
    var u2, l2, p2 = typeof a2;
    if ("string" === p2 && a2.length > 0) return function(i3) {
      if (!((i3 = String(i3)).length > 100)) {
        var a3 = /^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(i3);
        if (a3) {
          var c4 = parseFloat(a3[1]);
          switch ((a3[2] || "ms").toLowerCase()) {
            case "years":
            case "year":
            case "yrs":
            case "yr":
            case "y":
              return c4 * o2;
            case "weeks":
            case "week":
            case "w":
              return c4 * r3;
            case "days":
            case "day":
            case "d":
              return c4 * n2;
            case "hours":
            case "hour":
            case "hrs":
            case "hr":
            case "h":
              return c4 * s2;
            case "minutes":
            case "minute":
            case "mins":
            case "min":
            case "m":
              return c4 * t;
            case "seconds":
            case "second":
            case "secs":
            case "sec":
            case "s":
              return c4 * e;
            case "milliseconds":
            case "millisecond":
            case "msecs":
            case "msec":
            case "ms":
              return c4;
            default:
              return;
          }
        }
      }
    }(a2);
    if ("number" === p2 && isFinite(a2)) return c3.long ? (u2 = a2, (l2 = Math.abs(u2)) >= n2 ? i2(u2, l2, n2, "day") : l2 >= s2 ? i2(u2, l2, s2, "hour") : l2 >= t ? i2(u2, l2, t, "minute") : l2 >= e ? i2(u2, l2, e, "second") : u2 + " ms") : function(r4) {
      var o3 = Math.abs(r4);
      return o3 >= n2 ? Math.round(r4 / n2) + "d" : o3 >= s2 ? Math.round(r4 / s2) + "h" : o3 >= t ? Math.round(r4 / t) + "m" : o3 >= e ? Math.round(r4 / e) + "s" : r4 + "ms";
    }(a2);
    throw new Error("val is not a non-empty string or a valid number. val=" + JSON.stringify(a2));
  };
}
var p = function(e) {
  function t(e2) {
    let n3, r3, o2, i2 = null;
    function a2(...e3) {
      if (!a2.enabled) return;
      const s3 = a2, r4 = Number(/* @__PURE__ */ new Date()), o3 = r4 - (n3 || r4);
      s3.diff = o3, s3.prev = n3, s3.curr = r4, n3 = r4, e3[0] = t.coerce(e3[0]), "string" != typeof e3[0] && e3.unshift("%O");
      let i3 = 0;
      e3[0] = e3[0].replace(/%([a-zA-Z%])/g, (n4, r5) => {
        if ("%%" === n4) return "%";
        i3++;
        const o4 = t.formatters[r5];
        if ("function" == typeof o4) {
          const t2 = e3[i3];
          n4 = o4.call(s3, t2), e3.splice(i3, 1), i3--;
        }
        return n4;
      }), t.formatArgs.call(s3, e3), (s3.log || t.log).apply(s3, e3);
    }
    return a2.namespace = e2, a2.useColors = t.useColors(), a2.color = t.selectColor(e2), a2.extend = s2, a2.destroy = t.destroy, Object.defineProperty(a2, "enabled", { enumerable: true, configurable: false, get: () => null !== i2 ? i2 : (r3 !== t.namespaces && (r3 = t.namespaces, o2 = t.enabled(e2)), o2), set: (e3) => {
      i2 = e3;
    } }), "function" == typeof t.init && t.init(a2), a2;
  }
  function s2(e2, s3) {
    const n3 = t(this.namespace + (typeof s3 > "u" ? ":" : s3) + e2);
    return n3.log = this.log, n3;
  }
  function n2(e2) {
    return e2.toString().substring(2, e2.toString().length - 2).replace(/\.\*\?$/, "*");
  }
  return t.debug = t, t.default = t, t.coerce = function(e2) {
    return e2 instanceof Error ? e2.stack || e2.message : e2;
  }, t.disable = function() {
    const e2 = [...t.names.map(n2), ...t.skips.map(n2).map((e3) => "-" + e3)].join(",");
    return t.enable(""), e2;
  }, t.enable = function(e2) {
    let s3;
    t.save(e2), t.namespaces = e2, t.names = [], t.skips = [];
    const n3 = ("string" == typeof e2 ? e2 : "").split(/[\s,]+/), r3 = n3.length;
    for (s3 = 0; s3 < r3; s3++) n3[s3] && ("-" === (e2 = n3[s3].replace(/\*/g, ".*?"))[0] ? t.skips.push(new RegExp("^" + e2.slice(1) + "$")) : t.names.push(new RegExp("^" + e2 + "$")));
  }, t.enabled = function(e2) {
    if ("*" === e2[e2.length - 1]) return true;
    let s3, n3;
    for (s3 = 0, n3 = t.skips.length; s3 < n3; s3++) if (t.skips[s3].test(e2)) return false;
    for (s3 = 0, n3 = t.names.length; s3 < n3; s3++) if (t.names[s3].test(e2)) return true;
    return false;
  }, t.humanize = l(), t.destroy = function() {
    console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.");
  }, Object.keys(e).forEach((s3) => {
    t[s3] = e[s3];
  }), t.names = [], t.skips = [], t.formatters = {}, t.selectColor = function(e2) {
    let s3 = 0;
    for (let t2 = 0; t2 < e2.length; t2++) s3 = (s3 << 5) - s3 + e2.charCodeAt(t2), s3 |= 0;
    return t.colors[Math.abs(s3) % t.colors.length];
  }, t.enable(t.load()), t;
};
!function(e, t) {
  t.formatArgs = function(t2) {
    if (t2[0] = (this.useColors ? "%c" : "") + this.namespace + (this.useColors ? " %c" : " ") + t2[0] + (this.useColors ? "%c " : " ") + "+" + e.exports.humanize(this.diff), !this.useColors) return;
    const s3 = "color: " + this.color;
    t2.splice(1, 0, s3, "color: inherit");
    let n2 = 0, r3 = 0;
    t2[0].replace(/%[a-zA-Z%]/g, (e2) => {
      "%%" !== e2 && (n2++, "%c" === e2 && (r3 = n2));
    }), t2.splice(r3, 0, s3);
  }, t.save = function(e2) {
    try {
      e2 ? t.storage.setItem("debug", e2) : t.storage.removeItem("debug");
    } catch {
    }
  }, t.load = function() {
    let e2;
    try {
      e2 = t.storage.getItem("debug");
    } catch {
    }
    return !e2 && typeof process < "u" && "env" in process && (e2 = process.env.DEBUG), e2;
  }, t.useColors = function() {
    return !(!(typeof window < "u" && window.process) || "renderer" !== window.process.type && !window.process.__nwjs) || !(typeof navigator < "u" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)) && (typeof document < "u" && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance || typeof window < "u" && window.console && (window.console.firebug || window.console.exception && window.console.table) || typeof navigator < "u" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31 || typeof navigator < "u" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/));
  }, t.storage = function() {
    try {
      return localStorage;
    } catch {
    }
  }(), t.destroy = /* @__PURE__ */ (() => {
    let e2 = false;
    return () => {
      e2 || (e2 = true, console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`."));
    };
  })(), t.colors = ["#0000CC", "#0000FF", "#0033CC", "#0033FF", "#0066CC", "#0066FF", "#0099CC", "#0099FF", "#00CC00", "#00CC33", "#00CC66", "#00CC99", "#00CCCC", "#00CCFF", "#3300CC", "#3300FF", "#3333CC", "#3333FF", "#3366CC", "#3366FF", "#3399CC", "#3399FF", "#33CC00", "#33CC33", "#33CC66", "#33CC99", "#33CCCC", "#33CCFF", "#6600CC", "#6600FF", "#6633CC", "#6633FF", "#66CC00", "#66CC33", "#9900CC", "#9900FF", "#9933CC", "#9933FF", "#99CC00", "#99CC33", "#CC0000", "#CC0033", "#CC0066", "#CC0099", "#CC00CC", "#CC00FF", "#CC3300", "#CC3333", "#CC3366", "#CC3399", "#CC33CC", "#CC33FF", "#CC6600", "#CC6633", "#CC9900", "#CC9933", "#CCCC00", "#CCCC33", "#FF0000", "#FF0033", "#FF0066", "#FF0099", "#FF00CC", "#FF00FF", "#FF3300", "#FF3333", "#FF3366", "#FF3399", "#FF33CC", "#FF33FF", "#FF6600", "#FF6633", "#FF9900", "#FF9933", "#FFCC00", "#FFCC33"], t.log = console.debug || console.log || (() => {
  }), e.exports = p(t);
  const { formatters: s2 } = e.exports;
  s2.j = function(e2) {
    try {
      return JSON.stringify(e2);
    } catch (e3) {
      return "[UnexpectedJSONParseError]: " + e3.message;
    }
  };
}(u, u.exports);
var d = c(u.exports);
var f = ["cookie", "authorization"];
var m = Object.prototype.hasOwnProperty;
function C(e = {}) {
  const t = e.verbose, s2 = e.namespace || "get-it", n2 = d(s2), r3 = e.log || n2, o2 = r3 === n2 && !d.enabled(s2);
  let i2 = 0;
  return { processOptions: (e2) => (e2.debug = r3, e2.requestId = e2.requestId || ++i2, e2), onRequest: (s3) => {
    if (o2 || !s3) return s3;
    const n3 = s3.options;
    if (r3("[%s] HTTP %s %s", n3.requestId, n3.method, n3.url), t && n3.body && "string" == typeof n3.body && r3("[%s] Request body: %s", n3.requestId, n3.body), t && n3.headers) {
      const t2 = false === e.redactSensitiveHeaders ? n3.headers : ((e2, t3) => {
        const s4 = {};
        for (const n4 in e2) m.call(e2, n4) && (s4[n4] = t3.indexOf(n4.toLowerCase()) > -1 ? "<redacted>" : e2[n4]);
        return s4;
      })(n3.headers, f);
      r3("[%s] Request headers: %s", n3.requestId, JSON.stringify(t2, null, 2));
    }
    return s3;
  }, onResponse: (e2, s3) => {
    if (o2 || !e2) return e2;
    const n3 = s3.options.requestId;
    return r3("[%s] Response code: %s %s", n3, e2.statusCode, e2.statusMessage), t && e2.body && r3("[%s] Response body: %s", n3, function(e3) {
      return -1 !== (e3.headers["content-type"] || "").toLowerCase().indexOf("application/json") ? function(e4) {
        try {
          const t2 = "string" == typeof e4 ? JSON.parse(e4) : e4;
          return JSON.stringify(t2, null, 2);
        } catch {
          return e4;
        }
      }(e3.body) : e3.body;
    }(e2)), e2;
  }, onError: (e2, t2) => {
    const s3 = t2.options.requestId;
    return e2 ? (r3("[%s] ERROR: %s", s3, e2.message), e2) : (r3("[%s] Error encountered, but handled by an earlier middleware", s3), e2);
  } };
}
function h(e, t = {}) {
  return { processOptions: (s2) => {
    const n2 = s2.headers || {};
    return s2.headers = t.override ? Object.assign({}, n2, e) : Object.assign({}, e, n2), s2;
  } };
}
var g = class extends Error {
  constructor(e, t) {
    super();
    __publicField(this, "response");
    __publicField(this, "request");
    const s2 = e.url.length > 400 ? `${e.url.slice(0, 399)}…` : e.url;
    let n2 = `${e.method}-request to ${s2} resulted in `;
    n2 += `HTTP ${e.statusCode} ${e.statusMessage}`, this.message = n2.trim(), this.response = e, this.request = t.options;
  }
};
function b() {
  return { onResponse: (e, t) => {
    if (!(e.statusCode >= 400)) return e;
    throw new g(e, t);
  } };
}
function y(e = {}) {
  if ("function" != typeof e.inject) throw new Error("`injectResponse` middleware requires a `inject` function");
  return { interceptRequest: function(t, s2) {
    const n2 = e.inject(s2, t);
    if (!n2) return t;
    const r3 = s2.context.options;
    return { body: "", url: r3.url, method: r3.method, headers: {}, statusCode: 200, statusMessage: "OK", ...n2 };
  } };
}
var w = typeof Buffer > "u" ? () => false : (e) => Buffer.isBuffer(e);
function F(e) {
  return "[object Object]" === Object.prototype.toString.call(e);
}
function O(e) {
  if (false === F(e)) return false;
  const t = e.constructor;
  if (void 0 === t) return true;
  const s2 = t.prototype;
  return !(false === F(s2) || false === s2.hasOwnProperty("isPrototypeOf"));
}
var j = ["boolean", "string", "number"];
function v() {
  return { processOptions: (e) => {
    const t = e.body;
    return !t || "function" == typeof t.pipe || w(t) || -1 === j.indexOf(typeof t) && !Array.isArray(t) && !O(t) ? e : Object.assign({}, e, { body: JSON.stringify(e.body), headers: Object.assign({}, e.headers, { "Content-Type": "application/json" }) });
  } };
}
function x(e) {
  return { onResponse: (s2) => {
    const n2 = s2.headers["content-type"] || "", r3 = e && e.force || -1 !== n2.indexOf("application/json");
    return s2.body && n2 && r3 ? Object.assign({}, s2, { body: t(s2.body) }) : s2;
  }, processOptions: (e2) => Object.assign({}, e2, { headers: Object.assign({ Accept: "application/json" }, e2.headers) }) };
  function t(e2) {
    try {
      return JSON.parse(e2);
    } catch (e3) {
      throw e3.message = `Failed to parsed response body as JSON: ${e3.message}`, e3;
    }
  }
}
function E(e = {}) {
  if (!e.ca) throw new Error('Required mtls option "ca" is missing');
  if (!e.cert) throw new Error('Required mtls option "cert" is missing');
  if (!e.key) throw new Error('Required mtls option "key" is missing');
  return { finalizeOptions: (t) => {
    if (function(e2) {
      return "object" == typeof e2 && null !== e2 && !("protocol" in e2);
    }(t)) return t;
    const s2 = { cert: e.cert, key: e.key, ca: e.ca };
    return Object.assign({}, t, s2);
  } };
}
var R = {};
typeof globalThis < "u" ? R = globalThis : typeof window < "u" ? R = window : typeof global < "u" ? R = global : typeof self < "u" && (R = self);
var k = R;
function q(e = {}) {
  const t = e.implementation || k.Observable;
  if (!t) throw new Error("`Observable` is not available in global scope, and no implementation was passed");
  return { onReturn: (e2, s2) => new t((t2) => (e2.error.subscribe((e3) => t2.error(e3)), e2.progress.subscribe((e3) => t2.next(Object.assign({ type: "progress" }, e3))), e2.response.subscribe((e3) => {
    t2.next(Object.assign({ type: "response" }, e3)), t2.complete();
  }), e2.request.publish(s2), () => e2.abort.publish())) };
}
function A() {
  return { onRequest: (e) => {
    if ("xhr" !== e.adapter) return;
    const t = e.request, s2 = e.context;
    function n2(e2) {
      return (t2) => {
        const n3 = t2.lengthComputable ? t2.loaded / t2.total * 100 : -1;
        s2.channels.progress.publish({ stage: e2, percent: n3, total: t2.total, loaded: t2.loaded, lengthComputable: t2.lengthComputable });
      };
    }
    "upload" in t && "onprogress" in t.upload && (t.upload.onprogress = n2("upload")), "onprogress" in t && (t.onprogress = n2("download"));
  } };
}
var S = (e = {}) => {
  const t = e.implementation || Promise;
  if (!t) throw new Error("`Promise` is not available in global scope, and no implementation was passed");
  return { onReturn: (s2, n2) => new t((t2, r3) => {
    const o2 = n2.options.cancelToken;
    o2 && o2.promise.then((e2) => {
      s2.abort.publish(e2), r3(e2);
    }), s2.error.subscribe(r3), s2.response.subscribe((s3) => {
      t2(e.onlyBody ? s3.body : s3);
    }), setTimeout(() => {
      try {
        s2.request.publish(n2);
      } catch (e2) {
        r3(e2);
      }
    }, 0);
  }) };
};
var N = class {
  constructor(e) {
    __publicField(this, "__CANCEL__", true);
    __publicField(this, "message");
    this.message = e;
  }
  toString() {
    return "Cancel" + (this.message ? `: ${this.message}` : "");
  }
};
var _$ = class _$ {
  constructor(e) {
    __publicField(this, "promise");
    __publicField(this, "reason");
    if ("function" != typeof e) throw new TypeError("executor must be a function.");
    let t = null;
    this.promise = new Promise((e2) => {
      t = e2;
    }), e((e2) => {
      this.reason || (this.reason = new N(e2), t(this.reason));
    });
  }
};
__publicField(_$, "source", () => {
  let e;
  return { token: new _$((t) => {
    e = t;
  }), cancel: e };
});
var $ = _$;
function T(e) {
  if (!(false === e || e && e.host)) throw new Error("Proxy middleware takes an object of host, port and auth properties");
  return { processOptions: (t) => Object.assign({ proxy: e }, t) };
}
S.Cancel = N, S.CancelToken = $, S.isCancel = (e) => !(!e || !(e == null ? void 0 : e.__CANCEL__));
var I = (e, t, s2) => ("GET" === s2.method || "HEAD" === s2.method) && (e.isNetworkError || false);
function M(e) {
  return 100 * Math.pow(2, e) + 100 * Math.random();
}
var _ = (e = {}) => ((e2) => {
  const t = e2.maxRetries || 5, s2 = e2.retryDelay || M, n2 = e2.shouldRetry;
  return { onError: (e3, r3) => {
    const o2 = r3.options, i2 = o2.maxRetries || t, a2 = o2.retryDelay || s2, c3 = o2.shouldRetry || n2, u2 = o2.attemptNumber || 0;
    if (null !== (l2 = o2.body) && "object" == typeof l2 && "function" == typeof l2.pipe || !c3(e3, u2, o2) || u2 >= i2) return e3;
    var l2;
    const p2 = Object.assign({}, r3, { options: Object.assign({}, o2, { attemptNumber: u2 + 1 }) });
    return setTimeout(() => r3.channels.request.publish(p2), a2(u2)), null;
  } };
})({ shouldRetry: I, ...e });
function P(e) {
  const t = new URLSearchParams(), s2 = (e2, n2) => {
    const r3 = n2 instanceof Set ? Array.from(n2) : n2;
    if (Array.isArray(r3)) if (r3.length) for (const t2 in r3) s2(`${e2}[${t2}]`, r3[t2]);
    else t.append(`${e2}[]`, "");
    else if ("object" == typeof r3 && null !== r3) for (const [t2, n3] of Object.entries(r3)) s2(`${e2}[${t2}]`, n3);
    else t.append(e2, r3);
  };
  for (const [t2, n2] of Object.entries(e)) s2(t2, n2);
  return t.toString();
}
function J() {
  return { processOptions: (e) => {
    const t = e.body;
    return t && "function" != typeof t.pipe && !w(t) && O(t) ? { ...e, body: P(e.body), headers: { ...e.headers, "Content-Type": "application/x-www-form-urlencoded" } } : e;
  } };
}
_.shouldRetry = I;
var L = class extends Error {
  constructor(e, t) {
    super(e.message);
    __publicField(this, "request");
    __publicField(this, "code");
    this.request = t, this.code = e.code;
  }
};
var z = (H = n, function(e = {}) {
  const { maxRetries: t = 3, ms: s2 = 1e3, maxFree: n2 = 256 } = e, { finalizeOptions: r3 } = H({ keepAlive: true, keepAliveMsecs: s2, maxFreeSockets: n2 });
  return { finalizeOptions: r3, onError: (e2, s3) => {
    if (("GET" === s3.options.method || "POST" === s3.options.method) && e2 instanceof L && "ECONNRESET" === e2.code && e2.request.reusedSocket) {
      const e3 = s3.options.attemptNumber || 0;
      if (e3 < t) {
        const t2 = Object.assign({}, s3, { options: Object.assign({}, s3.options, { attemptNumber: e3 + 1 }) });
        return setImmediate(() => s3.channels.request.publish(t2)), null;
      }
    }
    return e2;
  } };
});
var H;
export {
  N as Cancel,
  $ as CancelToken,
  n as agent,
  i as base,
  C as debug,
  h as headers,
  b as httpErrors,
  y as injectResponse,
  v as jsonRequest,
  x as jsonResponse,
  z as keepAlive,
  E as mtls,
  q as observable,
  r as processOptions,
  A as progress,
  S as promise,
  T as proxy,
  _ as retry,
  J as urlEncoded,
  s as validateOptions
};
//# sourceMappingURL=get-it_middleware.js.map
