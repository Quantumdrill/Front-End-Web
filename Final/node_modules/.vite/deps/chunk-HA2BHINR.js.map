{
  "version": 3,
  "sources": ["../../get-it/src/middleware/defaultOptionsProcessor.ts", "../../get-it/src/middleware/defaultOptionsValidator.ts"],
  "sourcesContent": ["import type {MiddlewareHooks, RequestOptions} from 'get-it'\n\nconst isReactNative = typeof navigator === 'undefined' ? false : navigator.product === 'ReactNative'\n\nconst defaultOptions = {timeout: isReactNative ? 60000 : 120000} satisfies Partial<RequestOptions>\n\n/** @public */\nexport const processOptions = function processOptions(opts) {\n  const options = {\n    ...defaultOptions,\n    ...(typeof opts === 'string' ? {url: opts} : opts),\n  } satisfies RequestOptions\n\n  // Normalize timeouts\n  options.timeout = normalizeTimeout(options.timeout)\n\n  // Shallow-merge (override) existing query params\n  if (options.query) {\n    const {url, searchParams} = splitUrl(options.url)\n\n    for (const [key, value] of Object.entries(options.query)) {\n      if (value !== undefined) {\n        if (Array.isArray(value)) {\n          for (const v of value) {\n            searchParams.append(key, v as string)\n          }\n        } else {\n          searchParams.append(key, value as string)\n        }\n      }\n\n      // Merge back params into url\n      const search = searchParams.toString()\n      if (search) {\n        options.url = `${url}?${search}`\n      }\n    }\n  }\n\n  // Implicit POST if we have not specified a method but have a body\n  options.method =\n    options.body && !options.method ? 'POST' : (options.method || 'GET').toUpperCase()\n\n  return options\n} satisfies MiddlewareHooks['processOptions']\n\n/**\n * Given a string URL, extracts the query string and URL from each other, and returns them.\n * Note that we cannot use the `URL` constructor because of old React Native versions which are\n * majorly broken and returns incorrect results:\n *\n * (`new URL('http://foo/?a=b').toString()` == 'http://foo/?a=b/')\n */\nfunction splitUrl(url: string): {url: string; searchParams: URLSearchParams} {\n  const qIndex = url.indexOf('?')\n  if (qIndex === -1) {\n    return {url, searchParams: new URLSearchParams()}\n  }\n\n  const base = url.slice(0, qIndex)\n  const qs = url.slice(qIndex + 1)\n\n  // React Native's URL and URLSearchParams are broken, so passing a string to URLSearchParams\n  // does not work, leading to an empty query string. For other environments, this should be enough\n  if (!isReactNative) {\n    return {url: base, searchParams: new URLSearchParams(qs)}\n  }\n\n  // Sanity-check; we do not know of any environment where this is the case,\n  // but if it is, we should not proceed without giving a descriptive error\n  if (typeof decodeURIComponent !== 'function') {\n    throw new Error(\n      'Broken `URLSearchParams` implementation, and `decodeURIComponent` is not defined',\n    )\n  }\n\n  const params = new URLSearchParams()\n  for (const pair of qs.split('&')) {\n    const [key, value] = pair.split('=')\n    if (key) {\n      params.append(decodeQueryParam(key), decodeQueryParam(value || ''))\n    }\n  }\n\n  return {url: base, searchParams: params}\n}\n\nfunction decodeQueryParam(value: string): string {\n  return decodeURIComponent(value.replace(/\\+/g, ' '))\n}\n\nfunction normalizeTimeout(time: RequestOptions['timeout']) {\n  if (time === false || time === 0) {\n    return false\n  }\n\n  if (time.connect || time.socket) {\n    return time\n  }\n\n  const delay = Number(time)\n  if (isNaN(delay)) {\n    return normalizeTimeout(defaultOptions.timeout)\n  }\n\n  return {connect: delay, socket: delay}\n}\n", "import type {MiddlewareHooks} from 'get-it'\n\nconst validUrl = /^https?:\\/\\//i\n\n/** @public */\nexport const validateOptions = function validateOptions(options) {\n  if (!validUrl.test(options.url)) {\n    throw new Error(`\"${options.url}\" is not a valid URL`)\n  }\n} satisfies MiddlewareHooks['validateOptions']\n"],
  "mappings": ";AAEA,IAAMA,IAAAA,EAAAA,OAAuBC,YAAc,QAA4C,kBAAtBA,UAAUC;AAA3E,IAEMC,IAAiB,EAACC,SAASJ,IAAgB,MAAQ,KAAA;AAFzD,IAKaK,IAAiB,SAAwBC,IAAAA;AACpD,QAAMC,KAAU,EAAA,GACXJ,GAAAA,GACiB,YAAA,OAATG,KAAoB,EAACE,KAAKF,GAAAA,IAAQA,GAAAA;AAO/C,MAHAC,GAAQH,UAAUK,EAAiBF,GAAQH,OAAAA,GAGvCG,GAAQG,OAAO;AACjB,UAAA,EAAMF,KAACA,IAAKG,cAAAA,GAAAA,IAmChB,SAAkBH,IAAAA;AACV,YAAAI,KAASJ,GAAIK,QAAQ,GAAA;AAC3B,UAAA,OAAID,GACF,QAAO,EAACJ,KAAAA,IAAKG,cAAc,IAAIG,kBAAAA;AAG3B,YAAAC,KAAOP,GAAIQ,MAAM,GAAGJ,EAAAA,GACpBK,KAAKT,GAAIQ,MAAMJ,KAAS,CAAA;AAI9B,UAAA,CAAKZ,EACH,QAAO,EAACQ,KAAKO,IAAMJ,cAAc,IAAIG,gBAAgBG,EAAAA,EAAAA;AAKvD,UAAkC,cAAA,OAAvBC,mBACT,OAAM,IAAIC,MACR,kFAAA;AAIE,YAAAC,KAAS,IAAIN;AACnB,iBAAWO,MAAQJ,GAAGK,MAAM,GAAA,GAAM;AAChC,cAAA,CAAOC,IAAKC,EAAAA,IAASH,GAAKC,MAAM,GAAA;AAE9BC,QAAAA,MAAAH,GAAOK,OAAOC,EAAiBH,EAAAA,GAAMG,EAAiBF,MAAS,EAAA,CAAA;MAEnE;AAEA,aAAO,EAAChB,KAAKO,IAAMJ,cAAcS,GAAAA;IACnC,EAnEyCb,GAAQC,GAAAA;AAElC,eAAA,CAACe,IAAKC,EAAAA,KAAUG,OAAOC,QAAQrB,GAAQG,KAAAA,GAAQ;AACxD,UAAA,WAAIc,GACE,KAAAK,MAAMC,QAAQN,EAAAA,EAChB,YAAWO,MAAKP,GACDb,CAAAA,GAAAc,OAAOF,IAAKQ,EAAAA;UAGdpB,CAAAA,GAAAc,OAAOF,IAAKC,EAAAA;AAKvB,YAAAQ,KAASrB,GAAasB,SAAAA;AACxBD,MAAAA,OACFzB,GAAQC,MAAM,GAAGA,EAAAA,IAAOwB,EAAAA;IAE5B;EACF;AAGQ,SAAAzB,GAAA2B,SACN3B,GAAQ4B,QAAAA,CAAS5B,GAAQ2B,SAAS,UAAU3B,GAAQ2B,UAAU,OAAOE,YAAAA,GAEhE7B;AACT;AA2CA,SAASmB,EAAiBF,IAAAA;AACxB,SAAON,mBAAmBM,GAAMa,QAAQ,OAAO,GAAA,CAAA;AACjD;AAEA,SAAS5B,EAAiB6B,IAAAA;AACpB,MAAA,UAAAA,MAA2B,MAATA,GACb,QAAA;AAGL,MAAAA,GAAKC,WAAWD,GAAKE,OAChB,QAAAF;AAGH,QAAAG,KAAQC,OAAOJ,EAAAA;AACjB,SAAAK,MAAMF,EAAAA,IACDhC,EAAiBN,EAAeC,OAAAA,IAGlC,EAACmC,SAASE,IAAOD,QAAQC,GAAAA;AAClC;ACxGA,IAAMG,IAAW;AAAjB,IAGaC,IAAkB,SAAyBtC,IAAAA;AACtD,MAAA,CAAKqC,EAASE,KAAKvC,GAAQC,GAAAA,EACzB,OAAM,IAAIW,MAAM,IAAIZ,GAAQC,GAAAA,sBAAAA;AAEhC;AAAA,SAAAuC,EAAAC,IAAAA;AAAAA,SAAAA,MAAAA,GAAAA,cAAAA,OAAAA,UAAAA,eAAAA,KAAAA,IAAAA,SAAAA,IAAAA,GAAAA,UAAAA;AAAAA;",
  "names": ["isReactNative", "navigator", "product", "defaultOptions", "timeout", "processOptions", "opts", "options", "url", "normalizeTimeout", "query", "searchParams", "qIndex", "indexOf", "URLSearchParams", "base", "slice", "qs", "decodeURIComponent", "Error", "params", "pair", "split", "key", "value", "append", "decodeQueryParam", "Object", "entries", "Array", "isArray", "v", "search", "toString", "method", "body", "toUpperCase", "replace", "time", "connect", "socket", "delay", "Number", "isNaN", "validUrl", "validateOptions", "test", "getDefaultExportFromCjs", "x"]
}
