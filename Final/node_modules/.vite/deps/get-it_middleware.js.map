{
  "version": 3,
  "sources": ["../../get-it/src/middleware/agent/browser-agent.ts", "../../get-it/src/middleware/base.ts", "../../get-it/node_modules/ms/index.js", "../../get-it/node_modules/debug/src/common.js", "../../get-it/node_modules/debug/src/browser.js", "../../get-it/src/middleware/debug.ts", "../../get-it/src/middleware/headers.ts", "../../get-it/src/middleware/httpErrors.ts", "../../get-it/src/middleware/injectResponse.ts", "../../get-it/src/util/isBuffer.ts", "../../get-it/src/util/isPlainObject.ts", "../../get-it/src/middleware/jsonRequest.ts", "../../get-it/src/middleware/jsonResponse.ts", "../../get-it/src/middleware/mtls.ts", "../../get-it/src/util/isBrowserOptions.ts", "../../get-it/src/util/global.ts", "../../get-it/src/middleware/observable.ts", "../../get-it/src/middleware/progress/browser-progress.ts", "../../get-it/src/middleware/promise.ts", "../../get-it/src/middleware/proxy.ts", "../../get-it/src/util/browser-shouldRetry.ts", "../../get-it/src/middleware/retry/shared-retry.ts", "../../get-it/src/middleware/retry/browser-retry.ts", "../../get-it/src/middleware/urlEncoded.ts", "../../get-it/src/request/node-request.ts", "../../get-it/src/middleware.browser.ts", "../../get-it/src/middleware/keepAlive.ts"],
  "sourcesContent": ["/**\n * This middleware only has an effect in Node.js.\n * @public\n */\nexport function agent(\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  _opts?: any,\n): any {\n  return {}\n}\n", "import type {Middleware} from 'get-it'\n\nconst leadingSlash = /^\\//\nconst trailingSlash = /\\/$/\n\n/** @public */\nexport function base(baseUrl: string) {\n  const baseUri = baseUrl.replace(trailingSlash, '')\n  return {\n    processOptions: (options) => {\n      if (/^https?:\\/\\//i.test(options.url)) {\n        return options // Already prefixed\n      }\n\n      const url = [baseUri, options.url.replace(leadingSlash, '')].join('/')\n      return Object.assign({}, options, {url})\n    },\n  } satisfies Middleware\n}\n", "/**\n * Helpers.\n */\n\nvar s = 1000;\nvar m = s * 60;\nvar h = m * 60;\nvar d = h * 24;\nvar w = d * 7;\nvar y = d * 365.25;\n\n/**\n * Parse or format the given `val`.\n *\n * Options:\n *\n *  - `long` verbose formatting [false]\n *\n * @param {String|Number} val\n * @param {Object} [options]\n * @throws {Error} throw an error if val is not a non-empty string or a number\n * @return {String|Number}\n * @api public\n */\n\nmodule.exports = function(val, options) {\n  options = options || {};\n  var type = typeof val;\n  if (type === 'string' && val.length > 0) {\n    return parse(val);\n  } else if (type === 'number' && isFinite(val)) {\n    return options.long ? fmtLong(val) : fmtShort(val);\n  }\n  throw new Error(\n    'val is not a non-empty string or a valid number. val=' +\n      JSON.stringify(val)\n  );\n};\n\n/**\n * Parse the given `str` and return milliseconds.\n *\n * @param {String} str\n * @return {Number}\n * @api private\n */\n\nfunction parse(str) {\n  str = String(str);\n  if (str.length > 100) {\n    return;\n  }\n  var match = /^(-?(?:\\d+)?\\.?\\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(\n    str\n  );\n  if (!match) {\n    return;\n  }\n  var n = parseFloat(match[1]);\n  var type = (match[2] || 'ms').toLowerCase();\n  switch (type) {\n    case 'years':\n    case 'year':\n    case 'yrs':\n    case 'yr':\n    case 'y':\n      return n * y;\n    case 'weeks':\n    case 'week':\n    case 'w':\n      return n * w;\n    case 'days':\n    case 'day':\n    case 'd':\n      return n * d;\n    case 'hours':\n    case 'hour':\n    case 'hrs':\n    case 'hr':\n    case 'h':\n      return n * h;\n    case 'minutes':\n    case 'minute':\n    case 'mins':\n    case 'min':\n    case 'm':\n      return n * m;\n    case 'seconds':\n    case 'second':\n    case 'secs':\n    case 'sec':\n    case 's':\n      return n * s;\n    case 'milliseconds':\n    case 'millisecond':\n    case 'msecs':\n    case 'msec':\n    case 'ms':\n      return n;\n    default:\n      return undefined;\n  }\n}\n\n/**\n * Short format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction fmtShort(ms) {\n  var msAbs = Math.abs(ms);\n  if (msAbs >= d) {\n    return Math.round(ms / d) + 'd';\n  }\n  if (msAbs >= h) {\n    return Math.round(ms / h) + 'h';\n  }\n  if (msAbs >= m) {\n    return Math.round(ms / m) + 'm';\n  }\n  if (msAbs >= s) {\n    return Math.round(ms / s) + 's';\n  }\n  return ms + 'ms';\n}\n\n/**\n * Long format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction fmtLong(ms) {\n  var msAbs = Math.abs(ms);\n  if (msAbs >= d) {\n    return plural(ms, msAbs, d, 'day');\n  }\n  if (msAbs >= h) {\n    return plural(ms, msAbs, h, 'hour');\n  }\n  if (msAbs >= m) {\n    return plural(ms, msAbs, m, 'minute');\n  }\n  if (msAbs >= s) {\n    return plural(ms, msAbs, s, 'second');\n  }\n  return ms + ' ms';\n}\n\n/**\n * Pluralization helper.\n */\n\nfunction plural(ms, msAbs, n, name) {\n  var isPlural = msAbs >= n * 1.5;\n  return Math.round(ms / n) + ' ' + name + (isPlural ? 's' : '');\n}\n", "\n/**\n * This is the common logic for both the Node.js and web browser\n * implementations of `debug()`.\n */\n\nfunction setup(env) {\n\tcreateDebug.debug = createDebug;\n\tcreateDebug.default = createDebug;\n\tcreateDebug.coerce = coerce;\n\tcreateDebug.disable = disable;\n\tcreateDebug.enable = enable;\n\tcreateDebug.enabled = enabled;\n\tcreateDebug.humanize = require('ms');\n\tcreateDebug.destroy = destroy;\n\n\tObject.keys(env).forEach(key => {\n\t\tcreateDebug[key] = env[key];\n\t});\n\n\t/**\n\t* The currently active debug mode names, and names to skip.\n\t*/\n\n\tcreateDebug.names = [];\n\tcreateDebug.skips = [];\n\n\t/**\n\t* Map of special \"%n\" handling functions, for the debug \"format\" argument.\n\t*\n\t* Valid key names are a single, lower or upper-case letter, i.e. \"n\" and \"N\".\n\t*/\n\tcreateDebug.formatters = {};\n\n\t/**\n\t* Selects a color for a debug namespace\n\t* @param {String} namespace The namespace string for the debug instance to be colored\n\t* @return {Number|String} An ANSI color code for the given namespace\n\t* @api private\n\t*/\n\tfunction selectColor(namespace) {\n\t\tlet hash = 0;\n\n\t\tfor (let i = 0; i < namespace.length; i++) {\n\t\t\thash = ((hash << 5) - hash) + namespace.charCodeAt(i);\n\t\t\thash |= 0; // Convert to 32bit integer\n\t\t}\n\n\t\treturn createDebug.colors[Math.abs(hash) % createDebug.colors.length];\n\t}\n\tcreateDebug.selectColor = selectColor;\n\n\t/**\n\t* Create a debugger with the given `namespace`.\n\t*\n\t* @param {String} namespace\n\t* @return {Function}\n\t* @api public\n\t*/\n\tfunction createDebug(namespace) {\n\t\tlet prevTime;\n\t\tlet enableOverride = null;\n\t\tlet namespacesCache;\n\t\tlet enabledCache;\n\n\t\tfunction debug(...args) {\n\t\t\t// Disabled?\n\t\t\tif (!debug.enabled) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst self = debug;\n\n\t\t\t// Set `diff` timestamp\n\t\t\tconst curr = Number(new Date());\n\t\t\tconst ms = curr - (prevTime || curr);\n\t\t\tself.diff = ms;\n\t\t\tself.prev = prevTime;\n\t\t\tself.curr = curr;\n\t\t\tprevTime = curr;\n\n\t\t\targs[0] = createDebug.coerce(args[0]);\n\n\t\t\tif (typeof args[0] !== 'string') {\n\t\t\t\t// Anything else let's inspect with %O\n\t\t\t\targs.unshift('%O');\n\t\t\t}\n\n\t\t\t// Apply any `formatters` transformations\n\t\t\tlet index = 0;\n\t\t\targs[0] = args[0].replace(/%([a-zA-Z%])/g, (match, format) => {\n\t\t\t\t// If we encounter an escaped % then don't increase the array index\n\t\t\t\tif (match === '%%') {\n\t\t\t\t\treturn '%';\n\t\t\t\t}\n\t\t\t\tindex++;\n\t\t\t\tconst formatter = createDebug.formatters[format];\n\t\t\t\tif (typeof formatter === 'function') {\n\t\t\t\t\tconst val = args[index];\n\t\t\t\t\tmatch = formatter.call(self, val);\n\n\t\t\t\t\t// Now we need to remove `args[index]` since it's inlined in the `format`\n\t\t\t\t\targs.splice(index, 1);\n\t\t\t\t\tindex--;\n\t\t\t\t}\n\t\t\t\treturn match;\n\t\t\t});\n\n\t\t\t// Apply env-specific formatting (colors, etc.)\n\t\t\tcreateDebug.formatArgs.call(self, args);\n\n\t\t\tconst logFn = self.log || createDebug.log;\n\t\t\tlogFn.apply(self, args);\n\t\t}\n\n\t\tdebug.namespace = namespace;\n\t\tdebug.useColors = createDebug.useColors();\n\t\tdebug.color = createDebug.selectColor(namespace);\n\t\tdebug.extend = extend;\n\t\tdebug.destroy = createDebug.destroy; // XXX Temporary. Will be removed in the next major release.\n\n\t\tObject.defineProperty(debug, 'enabled', {\n\t\t\tenumerable: true,\n\t\t\tconfigurable: false,\n\t\t\tget: () => {\n\t\t\t\tif (enableOverride !== null) {\n\t\t\t\t\treturn enableOverride;\n\t\t\t\t}\n\t\t\t\tif (namespacesCache !== createDebug.namespaces) {\n\t\t\t\t\tnamespacesCache = createDebug.namespaces;\n\t\t\t\t\tenabledCache = createDebug.enabled(namespace);\n\t\t\t\t}\n\n\t\t\t\treturn enabledCache;\n\t\t\t},\n\t\t\tset: v => {\n\t\t\t\tenableOverride = v;\n\t\t\t}\n\t\t});\n\n\t\t// Env-specific initialization logic for debug instances\n\t\tif (typeof createDebug.init === 'function') {\n\t\t\tcreateDebug.init(debug);\n\t\t}\n\n\t\treturn debug;\n\t}\n\n\tfunction extend(namespace, delimiter) {\n\t\tconst newDebug = createDebug(this.namespace + (typeof delimiter === 'undefined' ? ':' : delimiter) + namespace);\n\t\tnewDebug.log = this.log;\n\t\treturn newDebug;\n\t}\n\n\t/**\n\t* Enables a debug mode by namespaces. This can include modes\n\t* separated by a colon and wildcards.\n\t*\n\t* @param {String} namespaces\n\t* @api public\n\t*/\n\tfunction enable(namespaces) {\n\t\tcreateDebug.save(namespaces);\n\t\tcreateDebug.namespaces = namespaces;\n\n\t\tcreateDebug.names = [];\n\t\tcreateDebug.skips = [];\n\n\t\tlet i;\n\t\tconst split = (typeof namespaces === 'string' ? namespaces : '').split(/[\\s,]+/);\n\t\tconst len = split.length;\n\n\t\tfor (i = 0; i < len; i++) {\n\t\t\tif (!split[i]) {\n\t\t\t\t// ignore empty strings\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tnamespaces = split[i].replace(/\\*/g, '.*?');\n\n\t\t\tif (namespaces[0] === '-') {\n\t\t\t\tcreateDebug.skips.push(new RegExp('^' + namespaces.slice(1) + '$'));\n\t\t\t} else {\n\t\t\t\tcreateDebug.names.push(new RegExp('^' + namespaces + '$'));\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t* Disable debug output.\n\t*\n\t* @return {String} namespaces\n\t* @api public\n\t*/\n\tfunction disable() {\n\t\tconst namespaces = [\n\t\t\t...createDebug.names.map(toNamespace),\n\t\t\t...createDebug.skips.map(toNamespace).map(namespace => '-' + namespace)\n\t\t].join(',');\n\t\tcreateDebug.enable('');\n\t\treturn namespaces;\n\t}\n\n\t/**\n\t* Returns true if the given mode name is enabled, false otherwise.\n\t*\n\t* @param {String} name\n\t* @return {Boolean}\n\t* @api public\n\t*/\n\tfunction enabled(name) {\n\t\tif (name[name.length - 1] === '*') {\n\t\t\treturn true;\n\t\t}\n\n\t\tlet i;\n\t\tlet len;\n\n\t\tfor (i = 0, len = createDebug.skips.length; i < len; i++) {\n\t\t\tif (createDebug.skips[i].test(name)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\tfor (i = 0, len = createDebug.names.length; i < len; i++) {\n\t\t\tif (createDebug.names[i].test(name)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t* Convert regexp to namespace\n\t*\n\t* @param {RegExp} regxep\n\t* @return {String} namespace\n\t* @api private\n\t*/\n\tfunction toNamespace(regexp) {\n\t\treturn regexp.toString()\n\t\t\t.substring(2, regexp.toString().length - 2)\n\t\t\t.replace(/\\.\\*\\?$/, '*');\n\t}\n\n\t/**\n\t* Coerce `val`.\n\t*\n\t* @param {Mixed} val\n\t* @return {Mixed}\n\t* @api private\n\t*/\n\tfunction coerce(val) {\n\t\tif (val instanceof Error) {\n\t\t\treturn val.stack || val.message;\n\t\t}\n\t\treturn val;\n\t}\n\n\t/**\n\t* XXX DO NOT USE. This is a temporary stub function.\n\t* XXX It WILL be removed in the next major release.\n\t*/\n\tfunction destroy() {\n\t\tconsole.warn('Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.');\n\t}\n\n\tcreateDebug.enable(createDebug.load());\n\n\treturn createDebug;\n}\n\nmodule.exports = setup;\n", "/* eslint-env browser */\n\n/**\n * This is the web browser implementation of `debug()`.\n */\n\nexports.formatArgs = formatArgs;\nexports.save = save;\nexports.load = load;\nexports.useColors = useColors;\nexports.storage = localstorage();\nexports.destroy = (() => {\n\tlet warned = false;\n\n\treturn () => {\n\t\tif (!warned) {\n\t\t\twarned = true;\n\t\t\tconsole.warn('Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.');\n\t\t}\n\t};\n})();\n\n/**\n * Colors.\n */\n\nexports.colors = [\n\t'#0000CC',\n\t'#0000FF',\n\t'#0033CC',\n\t'#0033FF',\n\t'#0066CC',\n\t'#0066FF',\n\t'#0099CC',\n\t'#0099FF',\n\t'#00CC00',\n\t'#00CC33',\n\t'#00CC66',\n\t'#00CC99',\n\t'#00CCCC',\n\t'#00CCFF',\n\t'#3300CC',\n\t'#3300FF',\n\t'#3333CC',\n\t'#3333FF',\n\t'#3366CC',\n\t'#3366FF',\n\t'#3399CC',\n\t'#3399FF',\n\t'#33CC00',\n\t'#33CC33',\n\t'#33CC66',\n\t'#33CC99',\n\t'#33CCCC',\n\t'#33CCFF',\n\t'#6600CC',\n\t'#6600FF',\n\t'#6633CC',\n\t'#6633FF',\n\t'#66CC00',\n\t'#66CC33',\n\t'#9900CC',\n\t'#9900FF',\n\t'#9933CC',\n\t'#9933FF',\n\t'#99CC00',\n\t'#99CC33',\n\t'#CC0000',\n\t'#CC0033',\n\t'#CC0066',\n\t'#CC0099',\n\t'#CC00CC',\n\t'#CC00FF',\n\t'#CC3300',\n\t'#CC3333',\n\t'#CC3366',\n\t'#CC3399',\n\t'#CC33CC',\n\t'#CC33FF',\n\t'#CC6600',\n\t'#CC6633',\n\t'#CC9900',\n\t'#CC9933',\n\t'#CCCC00',\n\t'#CCCC33',\n\t'#FF0000',\n\t'#FF0033',\n\t'#FF0066',\n\t'#FF0099',\n\t'#FF00CC',\n\t'#FF00FF',\n\t'#FF3300',\n\t'#FF3333',\n\t'#FF3366',\n\t'#FF3399',\n\t'#FF33CC',\n\t'#FF33FF',\n\t'#FF6600',\n\t'#FF6633',\n\t'#FF9900',\n\t'#FF9933',\n\t'#FFCC00',\n\t'#FFCC33'\n];\n\n/**\n * Currently only WebKit-based Web Inspectors, Firefox >= v31,\n * and the Firebug extension (any Firefox version) are known\n * to support \"%c\" CSS customizations.\n *\n * TODO: add a `localStorage` variable to explicitly enable/disable colors\n */\n\n// eslint-disable-next-line complexity\nfunction useColors() {\n\t// NB: In an Electron preload script, document will be defined but not fully\n\t// initialized. Since we know we're in Chrome, we'll just detect this case\n\t// explicitly\n\tif (typeof window !== 'undefined' && window.process && (window.process.type === 'renderer' || window.process.__nwjs)) {\n\t\treturn true;\n\t}\n\n\t// Internet Explorer and Edge do not support colors.\n\tif (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\\/(\\d+)/)) {\n\t\treturn false;\n\t}\n\n\t// Is webkit? http://stackoverflow.com/a/16459606/376773\n\t// document is undefined in react-native: https://github.com/facebook/react-native/pull/1632\n\treturn (typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance) ||\n\t\t// Is firebug? http://stackoverflow.com/a/398120/376773\n\t\t(typeof window !== 'undefined' && window.console && (window.console.firebug || (window.console.exception && window.console.table))) ||\n\t\t// Is firefox >= v31?\n\t\t// https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages\n\t\t(typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\\/(\\d+)/) && parseInt(RegExp.$1, 10) >= 31) ||\n\t\t// Double check webkit in userAgent just in case we are in a worker\n\t\t(typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\\/(\\d+)/));\n}\n\n/**\n * Colorize log arguments if enabled.\n *\n * @api public\n */\n\nfunction formatArgs(args) {\n\targs[0] = (this.useColors ? '%c' : '') +\n\t\tthis.namespace +\n\t\t(this.useColors ? ' %c' : ' ') +\n\t\targs[0] +\n\t\t(this.useColors ? '%c ' : ' ') +\n\t\t'+' + module.exports.humanize(this.diff);\n\n\tif (!this.useColors) {\n\t\treturn;\n\t}\n\n\tconst c = 'color: ' + this.color;\n\targs.splice(1, 0, c, 'color: inherit');\n\n\t// The final \"%c\" is somewhat tricky, because there could be other\n\t// arguments passed either before or after the %c, so we need to\n\t// figure out the correct index to insert the CSS into\n\tlet index = 0;\n\tlet lastC = 0;\n\targs[0].replace(/%[a-zA-Z%]/g, match => {\n\t\tif (match === '%%') {\n\t\t\treturn;\n\t\t}\n\t\tindex++;\n\t\tif (match === '%c') {\n\t\t\t// We only are interested in the *last* %c\n\t\t\t// (the user may have provided their own)\n\t\t\tlastC = index;\n\t\t}\n\t});\n\n\targs.splice(lastC, 0, c);\n}\n\n/**\n * Invokes `console.debug()` when available.\n * No-op when `console.debug` is not a \"function\".\n * If `console.debug` is not available, falls back\n * to `console.log`.\n *\n * @api public\n */\nexports.log = console.debug || console.log || (() => {});\n\n/**\n * Save `namespaces`.\n *\n * @param {String} namespaces\n * @api private\n */\nfunction save(namespaces) {\n\ttry {\n\t\tif (namespaces) {\n\t\t\texports.storage.setItem('debug', namespaces);\n\t\t} else {\n\t\t\texports.storage.removeItem('debug');\n\t\t}\n\t} catch (error) {\n\t\t// Swallow\n\t\t// XXX (@Qix-) should we be logging these?\n\t}\n}\n\n/**\n * Load `namespaces`.\n *\n * @return {String} returns the previously persisted debug modes\n * @api private\n */\nfunction load() {\n\tlet r;\n\ttry {\n\t\tr = exports.storage.getItem('debug');\n\t} catch (error) {\n\t\t// Swallow\n\t\t// XXX (@Qix-) should we be logging these?\n\t}\n\n\t// If debug isn't set in LS, and we're in Electron, try to load $DEBUG\n\tif (!r && typeof process !== 'undefined' && 'env' in process) {\n\t\tr = process.env.DEBUG;\n\t}\n\n\treturn r;\n}\n\n/**\n * Localstorage attempts to return the localstorage.\n *\n * This is necessary because safari throws\n * when a user disables cookies/localstorage\n * and you attempt to access it.\n *\n * @return {LocalStorage}\n * @api private\n */\n\nfunction localstorage() {\n\ttry {\n\t\t// TVMLKit (Apple TV JS Runtime) does not have a window object, just localStorage in the global context\n\t\t// The Browser also has localStorage in the global context.\n\t\treturn localStorage;\n\t} catch (error) {\n\t\t// Swallow\n\t\t// XXX (@Qix-) should we be logging these?\n\t}\n}\n\nmodule.exports = require('./common')(exports);\n\nconst {formatters} = module.exports;\n\n/**\n * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.\n */\n\nformatters.j = function (v) {\n\ttry {\n\t\treturn JSON.stringify(v);\n\t} catch (error) {\n\t\treturn '[UnexpectedJSONParseError]: ' + error.message;\n\t}\n};\n", "import debugIt from 'debug'\nimport type {Middleware} from 'get-it'\n\nconst SENSITIVE_HEADERS = ['cookie', 'authorization']\n\nconst hasOwn = Object.prototype.hasOwnProperty\nconst redactKeys = (source: any, redacted: any) => {\n  const target: any = {}\n  for (const key in source) {\n    if (hasOwn.call(source, key)) {\n      target[key] = redacted.indexOf(key.toLowerCase()) > -1 ? '<redacted>' : source[key]\n    }\n  }\n  return target\n}\n\n/** @public */\nexport function debug(opts: any = {}) {\n  const verbose = opts.verbose\n  const namespace = opts.namespace || 'get-it'\n  const defaultLogger = debugIt(namespace)\n  const log = opts.log || defaultLogger\n  const shortCircuit = log === defaultLogger && !debugIt.enabled(namespace)\n  let requestId = 0\n\n  return {\n    processOptions: (options) => {\n      options.debug = log\n      options.requestId = options.requestId || ++requestId\n      return options\n    },\n\n    onRequest: (event) => {\n      // Short-circuit if not enabled, to save some CPU cycles with formatting stuff\n      if (shortCircuit || !event) {\n        return event\n      }\n\n      const options = event.options\n\n      log('[%s] HTTP %s %s', options.requestId, options.method, options.url)\n\n      if (verbose && options.body && typeof options.body === 'string') {\n        log('[%s] Request body: %s', options.requestId, options.body)\n      }\n\n      if (verbose && options.headers) {\n        const headers =\n          opts.redactSensitiveHeaders === false\n            ? options.headers\n            : redactKeys(options.headers, SENSITIVE_HEADERS)\n\n        log('[%s] Request headers: %s', options.requestId, JSON.stringify(headers, null, 2))\n      }\n\n      return event\n    },\n\n    onResponse: (res, context) => {\n      // Short-circuit if not enabled, to save some CPU cycles with formatting stuff\n      if (shortCircuit || !res) {\n        return res\n      }\n\n      const reqId = context.options.requestId\n\n      log('[%s] Response code: %s %s', reqId, res.statusCode, res.statusMessage)\n\n      if (verbose && res.body) {\n        log('[%s] Response body: %s', reqId, stringifyBody(res))\n      }\n\n      return res\n    },\n\n    onError: (err, context) => {\n      const reqId = context.options.requestId\n      if (!err) {\n        log('[%s] Error encountered, but handled by an earlier middleware', reqId)\n        return err\n      }\n\n      log('[%s] ERROR: %s', reqId, err.message)\n      return err\n    },\n  } satisfies Middleware\n}\n\nfunction stringifyBody(res: any) {\n  const contentType = (res.headers['content-type'] || '').toLowerCase()\n  const isJson = contentType.indexOf('application/json') !== -1\n  return isJson ? tryFormat(res.body) : res.body\n}\n\n// Attempt pretty-formatting JSON\nfunction tryFormat(body: any) {\n  try {\n    const parsed = typeof body === 'string' ? JSON.parse(body) : body\n    return JSON.stringify(parsed, null, 2)\n  } catch (err) {\n    return body\n  }\n}\n", "import type {Middleware} from 'get-it'\n\n/** @public */\nexport function headers(_headers: any, opts: any = {}) {\n  return {\n    processOptions: (options) => {\n      const existing = options.headers || {}\n      options.headers = opts.override\n        ? Object.assign({}, existing, _headers)\n        : Object.assign({}, _headers, existing)\n\n      return options\n    },\n  } satisfies Middleware\n}\n", "import type {Middleware} from 'get-it'\n\nclass HttpError extends Error {\n  response: any\n  request: any\n  constructor(res: any, ctx: any) {\n    super()\n    const truncatedUrl = res.url.length > 400 ? `${res.url.slice(0, 399)}…` : res.url\n    let msg = `${res.method}-request to ${truncatedUrl} resulted in `\n    msg += `HTTP ${res.statusCode} ${res.statusMessage}`\n\n    this.message = msg.trim()\n    this.response = res\n    this.request = ctx.options\n  }\n}\n\n/** @public */\nexport function httpErrors() {\n  return {\n    onResponse: (res, ctx) => {\n      const isHttpError = res.statusCode >= 400\n      if (!isHttpError) {\n        return res\n      }\n\n      throw new HttpError(res, ctx)\n    },\n  } satisfies Middleware\n}\n", "import type {Middleware, MiddlewareHooks, MiddlewareResponse} from 'get-it'\n\n/** @public */\nexport function injectResponse(\n  opts: {\n    inject: (\n      event: Parameters<MiddlewareHooks['interceptRequest']>[1],\n      prevValue: Parameters<MiddlewareHooks['interceptRequest']>[0],\n    ) => Partial<MiddlewareResponse | undefined | void>\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  } = {} as any,\n) {\n  if (typeof opts.inject !== 'function') {\n    throw new Error('`injectResponse` middleware requires a `inject` function')\n  }\n\n  const inject = function inject(prevValue, event) {\n    const response = opts.inject(event, prevValue)\n    if (!response) {\n      return prevValue\n    }\n\n    // Merge defaults so we don't have to provide the most basic of details unless we want to\n    const options = event.context.options\n    return {\n      body: '',\n      url: options.url,\n      method: options.method!,\n      headers: {},\n      statusCode: 200,\n      statusMessage: 'OK',\n      ...response,\n    } satisfies MiddlewareResponse\n  } satisfies Middleware['interceptRequest']\n\n  return {interceptRequest: inject} satisfies Middleware\n}\n", "export const isBuffer =\n  typeof Buffer === 'undefined' ? () => false : (obj: unknown) => Buffer.isBuffer(obj)\n", "/*!\n * is-plain-object <https://github.com/jonschlinkert/is-plain-object>\n *\n * Copyright (c) 2014-2017, Jon Schlinkert.\n * Released under the MIT License.\n */\n\nfunction isObject(o: unknown): o is Record<string, unknown> {\n  return Object.prototype.toString.call(o) === '[object Object]'\n}\n\nexport function isPlainObject(o: unknown): boolean {\n  if (isObject(o) === false) return false\n\n  // If has modified constructor\n  const ctor = o.constructor\n  if (ctor === undefined) return true\n\n  // If has modified prototype\n  const prot = ctor.prototype\n  if (isObject(prot) === false) return false\n\n  // If constructor does not have an Object-specific method\n  if (\n    // eslint-disable-next-line no-prototype-builtins\n    prot.hasOwnProperty('isPrototypeOf') === false\n  ) {\n    return false\n  }\n\n  // Most likely a plain Object\n  return true\n}\n", "import type {Middleware} from 'get-it'\n\nimport {isBuffer} from '../util/isBuffer'\nimport {isPlainObject} from '../util/isPlainObject'\n\nconst serializeTypes = ['boolean', 'string', 'number']\n\n/** @public */\nexport function jsonRequest() {\n  return {\n    processOptions: (options) => {\n      const body = options.body\n      if (!body) {\n        return options\n      }\n\n      const isStream = typeof body.pipe === 'function'\n      const shouldSerialize =\n        !isStream &&\n        !isBuffer(body) &&\n        (serializeTypes.indexOf(typeof body) !== -1 || Array.isArray(body) || isPlainObject(body))\n\n      if (!shouldSerialize) {\n        return options\n      }\n\n      return Object.assign({}, options, {\n        body: JSON.stringify(options.body),\n        headers: Object.assign({}, options.headers, {\n          'Content-Type': 'application/json',\n        }),\n      })\n    },\n  } satisfies Middleware\n}\n", "import type {Middleware} from 'get-it'\n\n/** @public */\nexport function jsonResponse(opts?: any) {\n  return {\n    onResponse: (response) => {\n      const contentType = response.headers['content-type'] || ''\n      const shouldDecode = (opts && opts.force) || contentType.indexOf('application/json') !== -1\n      if (!response.body || !contentType || !shouldDecode) {\n        return response\n      }\n\n      return Object.assign({}, response, {body: tryParse(response.body)})\n    },\n\n    processOptions: (options) =>\n      Object.assign({}, options, {\n        headers: Object.assign({Accept: 'application/json'}, options.headers),\n      }),\n  } satisfies Middleware\n\n  function tryParse(body: any) {\n    try {\n      return JSON.parse(body)\n    } catch (err: any) {\n      err.message = `Failed to parsed response body as JSON: ${err.message}`\n      throw err\n    }\n  }\n}\n", "import type {Middleware} from 'get-it'\n\nimport {isBrowserOptions} from '../util/isBrowserOptions'\n\n/** @public */\nexport function mtls(config: any = {}) {\n  if (!config.ca) {\n    throw new Error('Required mtls option \"ca\" is missing')\n  }\n  if (!config.cert) {\n    throw new Error('Required mtls option \"cert\" is missing')\n  }\n  if (!config.key) {\n    throw new Error('Required mtls option \"key\" is missing')\n  }\n\n  return {\n    finalizeOptions: (options) => {\n      if (isBrowserOptions(options)) {\n        return options\n      }\n\n      const mtlsOpts = {\n        cert: config.cert,\n        key: config.key,\n        ca: config.ca,\n      }\n      return Object.assign({}, options, mtlsOpts)\n    },\n  } satisfies Middleware\n}\n", "import type {RequestOptions} from 'get-it'\n\nexport function isBrowserOptions(options: unknown): options is RequestOptions {\n  return typeof options === 'object' && options !== null && !('protocol' in options)\n}\n", "let actualGlobal = {} as typeof globalThis\n\nif (typeof globalThis !== 'undefined') {\n  actualGlobal = globalThis\n} else if (typeof window !== 'undefined') {\n  actualGlobal = window\n} else if (typeof global !== 'undefined') {\n  actualGlobal = global\n} else if (typeof self !== 'undefined') {\n  actualGlobal = self\n}\n\nexport default actualGlobal\n", "import type {Middleware} from 'get-it'\n\nimport global from '../util/global'\n\n/** @public */\nexport function observable(\n  opts: {\n    implementation?: any\n  } = {},\n) {\n  const Observable =\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any -- @TODO consider dropping checking for a global Observable since it's not on a standards track\n    opts.implementation || (global as any).Observable\n  if (!Observable) {\n    throw new Error(\n      '`Observable` is not available in global scope, and no implementation was passed',\n    )\n  }\n\n  return {\n    onReturn: (channels, context) =>\n      new Observable((observer: any) => {\n        channels.error.subscribe((err) => observer.error(err))\n        channels.progress.subscribe((event) =>\n          observer.next(Object.assign({type: 'progress'}, event)),\n        )\n        channels.response.subscribe((response) => {\n          observer.next(Object.assign({type: 'response'}, response))\n          observer.complete()\n        })\n\n        channels.request.publish(context)\n        return () => channels.abort.publish()\n      }),\n  } satisfies Middleware\n}\n", "import type {Middleware} from 'get-it'\n\n/** @public */\nexport function progress() {\n  return {\n    onRequest: (evt) => {\n      if (evt.adapter !== 'xhr') {\n        return\n      }\n\n      const xhr = evt.request\n      const context = evt.context\n\n      if ('upload' in xhr && 'onprogress' in xhr.upload) {\n        xhr.upload.onprogress = handleProgress('upload')\n      }\n\n      if ('onprogress' in xhr) {\n        xhr.onprogress = handleProgress('download')\n      }\n\n      function handleProgress(stage: 'download' | 'upload') {\n        return (event: any) => {\n          const percent = event.lengthComputable ? (event.loaded / event.total) * 100 : -1\n          context.channels.progress.publish({\n            stage,\n            percent,\n            total: event.total,\n            loaded: event.loaded,\n            lengthComputable: event.lengthComputable,\n          })\n        }\n      }\n    },\n  } satisfies Middleware\n}\n", "import type {Middleware} from 'get-it'\n\n/** @public */\nexport const promise = (\n  options: {onlyBody?: boolean; implementation?: PromiseConstructor} = {},\n) => {\n  const PromiseImplementation = options.implementation || Promise\n  if (!PromiseImplementation) {\n    throw new Error('`Promise` is not available in global scope, and no implementation was passed')\n  }\n\n  return {\n    onReturn: (channels, context) =>\n      new PromiseImplementation((resolve, reject) => {\n        const cancel = context.options.cancelToken\n        if (cancel) {\n          cancel.promise.then((reason: any) => {\n            channels.abort.publish(reason)\n            reject(reason)\n          })\n        }\n\n        channels.error.subscribe(reject)\n        channels.response.subscribe((response) => {\n          resolve(options.onlyBody ? (response as any).body : response)\n        })\n\n        // Wait until next tick in case cancel has been performed\n        setTimeout(() => {\n          try {\n            channels.request.publish(context)\n          } catch (err) {\n            reject(err)\n          }\n        }, 0)\n      }),\n  } satisfies Middleware\n}\n\n/**\n * The cancel token API is based on the [cancelable promises proposal](https://github.com/tc39/proposal-cancelable-promises), which is currently at Stage 1.\n *\n * Code shamelessly stolen/borrowed from MIT-licensed [axios](https://github.com/mzabriskie/axios). Thanks to [Nick Uraltsev](https://github.com/nickuraltsev), [Matt Zabriskie](https://github.com/mzabriskie) and the other contributors of that project!\n */\n/** @public */\nexport class Cancel {\n  __CANCEL__ = true\n\n  message: string | undefined\n\n  constructor(message: string | undefined) {\n    this.message = message\n  }\n\n  toString() {\n    return `Cancel${this.message ? `: ${this.message}` : ''}`\n  }\n}\n\n/** @public */\nexport class CancelToken {\n  promise: Promise<any>\n  reason?: Cancel\n\n  constructor(executor: (cb: (message?: string) => void) => void) {\n    if (typeof executor !== 'function') {\n      throw new TypeError('executor must be a function.')\n    }\n\n    let resolvePromise: any = null\n\n    this.promise = new Promise((resolve) => {\n      resolvePromise = resolve\n    })\n\n    executor((message?: string) => {\n      if (this.reason) {\n        // Cancellation has already been requested\n        return\n      }\n\n      this.reason = new Cancel(message)\n      resolvePromise(this.reason)\n    })\n  }\n\n  static source = () => {\n    let cancel: (message?: string) => void\n    const token = new CancelToken((can) => {\n      cancel = can\n    })\n\n    return {\n      token: token,\n      cancel: cancel!,\n    }\n  }\n}\n\nconst isCancel = (value: any): value is Cancel => !!(value && value?.__CANCEL__)\n\npromise.Cancel = Cancel\npromise.CancelToken = CancelToken\npromise.isCancel = isCancel\n", "import type {Middleware} from 'get-it'\n\n/** @public */\nexport function proxy(_proxy: any) {\n  if (_proxy !== false && (!_proxy || !_proxy.host)) {\n    throw new Error('Proxy middleware takes an object of host, port and auth properties')\n  }\n\n  return {\n    processOptions: (options) => Object.assign({proxy: _proxy}, options),\n  } satisfies Middleware\n}\n", "export default (err: any, _attempt: any, options: any) => {\n  if (options.method !== 'GET' && options.method !== 'HEAD') {\n    return false\n  }\n\n  return err.isNetworkError || false\n}\n", "import type {Middleware, RetryOptions} from 'get-it'\n\nconst isStream = (stream: any) =>\n  stream !== null && typeof stream === 'object' && typeof stream.pipe === 'function'\n\n/** @public */\nexport default (opts: RetryOptions) => {\n  const maxRetries = opts.maxRetries || 5\n  const retryDelay = opts.retryDelay || getRetryDelay\n  const allowRetry = opts.shouldRetry\n\n  return {\n    onError: (err, context) => {\n      const options = context.options\n      const max = options.maxRetries || maxRetries\n      const delay = options.retryDelay || retryDelay\n      const shouldRetry = options.shouldRetry || allowRetry\n      const attemptNumber = options.attemptNumber || 0\n\n      // We can't retry if body is a stream, since it'll be drained\n      if (isStream(options.body)) {\n        return err\n      }\n\n      // Give up?\n      if (!shouldRetry(err, attemptNumber, options) || attemptNumber >= max) {\n        return err\n      }\n\n      // Create a new context with an increased attempt number, so we can exit if we reach a limit\n      const newContext = Object.assign({}, context, {\n        options: Object.assign({}, options, {attemptNumber: attemptNumber + 1}),\n      })\n\n      // Wait a given amount of time before doing the request again\n      setTimeout(() => context.channels.request.publish(newContext), delay(attemptNumber))\n\n      // Signal that we've handled the error and that it should not propagate further\n      return null\n    },\n  } satisfies Middleware\n}\n\nfunction getRetryDelay(attemptNum: number) {\n  return 100 * Math.pow(2, attemptNum) + Math.random() * 100\n}\n", "import type {RetryOptions} from 'get-it'\n\nimport defaultShouldRetry from '../../util/browser-shouldRetry'\nimport sharedRetry from './shared-retry'\n\n/** @public */\nexport const retry = (opts: Partial<RetryOptions> = {}) =>\n  sharedRetry({shouldRetry: defaultShouldRetry, ...opts})\n\nretry.shouldRetry = defaultShouldRetry\n", "import type {Middleware} from 'get-it'\n\nimport {isBuffer} from '../util/isBuffer'\nimport {isPlainObject} from '../util/isPlainObject'\n\nfunction encode(data: Record<string, string | Set<number | string>>): string {\n  const query = new URLSearchParams()\n\n  const nest = (name: string, _value: unknown) => {\n    const value = _value instanceof Set ? Array.from(_value) : _value\n    if (Array.isArray(value)) {\n      if (value.length) {\n        for (const index in value) {\n          nest(`${name}[${index}]`, value[index])\n        }\n      } else {\n        query.append(`${name}[]`, '')\n      }\n    } else if (typeof value === 'object' && value !== null) {\n      for (const [key, obj] of Object.entries(value)) {\n        nest(`${name}[${key}]`, obj)\n      }\n    } else {\n      query.append(name, value as string)\n    }\n  }\n\n  for (const [key, value] of Object.entries(data)) {\n    nest(key, value)\n  }\n\n  return query.toString()\n}\n\n/** @public */\nexport function urlEncoded() {\n  return {\n    processOptions: (options) => {\n      const body = options.body\n      if (!body) {\n        return options\n      }\n\n      const isStream = typeof body.pipe === 'function'\n      const shouldSerialize = !isStream && !isBuffer(body) && isPlainObject(body)\n\n      if (!shouldSerialize) {\n        return options\n      }\n\n      return {\n        ...options,\n        body: encode(options.body),\n        headers: {\n          ...options.headers,\n          'Content-Type': 'application/x-www-form-urlencoded',\n        },\n      }\n    },\n  } satisfies Middleware\n}\n", "import decompressResponse from 'decompress-response'\nimport follow, {type FollowResponse, type RedirectableRequest} from 'follow-redirects'\nimport type {FinalizeNodeOptionsPayload, HttpRequest, MiddlewareResponse} from 'get-it'\nimport http from 'http'\nimport https from 'https'\nimport progressStream from 'progress-stream'\nimport qs from 'querystring'\nimport {Readable, type Stream} from 'stream'\nimport url from 'url'\n\nimport {lowerCaseHeaders} from '../util/lowerCaseHeaders'\nimport {getProxyOptions, rewriteUriForProxy} from './node/proxy'\nimport {concat} from './node/simpleConcat'\nimport {timedOut} from './node/timedOut'\nimport * as tunneling from './node/tunnel'\n\n/**\n * Taken from:\n * https://github.com/sindresorhus/is-stream/blob/fb8caed475b4107cee3c22be3252a904020eb2d4/index.js#L3-L6\n */\nconst isStream = (stream: any): stream is Stream =>\n  stream !== null && typeof stream === 'object' && typeof stream.pipe === 'function'\n\n/** @public */\nexport const adapter = 'node' satisfies import('../types').RequestAdapter\n\nexport class NodeRequestError extends Error {\n  request: http.ClientRequest\n  code?: string | undefined\n\n  constructor(err: NodeJS.ErrnoException, req: any) {\n    super(err.message)\n    this.request = req\n    this.code = err.code\n  }\n}\n\n// Reduce a fully fledged node-style response object to\n// something that works in both browser and node environment\nconst reduceResponse = (\n  res: any,\n  reqUrl: string,\n  method: string,\n  body: any,\n): MiddlewareResponse => ({\n  body,\n  url: reqUrl,\n  method: method,\n  headers: res.headers,\n  statusCode: res.statusCode,\n  statusMessage: res.statusMessage,\n})\n\nexport const httpRequester: HttpRequest = (context, cb) => {\n  const {options} = context\n  const uri = Object.assign({}, url.parse(options.url))\n\n  if (typeof fetch === 'function' && options.fetch) {\n    const controller = new AbortController()\n    const reqOpts = context.applyMiddleware('finalizeOptions', {\n      ...uri,\n      method: options.method,\n      headers: {\n        ...(typeof options.fetch === 'object' && options.fetch.headers\n          ? lowerCaseHeaders(options.fetch.headers)\n          : {}),\n        ...lowerCaseHeaders(options.headers),\n      },\n      maxRedirects: options.maxRedirects,\n    }) as FinalizeNodeOptionsPayload\n    const fetchOpts = {\n      credentials: options.withCredentials ? 'include' : 'omit',\n      ...(typeof options.fetch === 'object' ? options.fetch : {}),\n      method: reqOpts.method,\n      headers: reqOpts.headers,\n      body: options.body,\n      signal: controller.signal,\n    } satisfies RequestInit\n\n    // Allow middleware to inject a response, for instance in the case of caching or mocking\n    const injectedResponse = context.applyMiddleware('interceptRequest', undefined, {\n      adapter,\n      context,\n    })\n\n    // If middleware injected a response, treat it as we normally would and return it\n    // Do note that the injected response has to be reduced to a cross-environment friendly response\n    if (injectedResponse) {\n      const cbTimer = setTimeout(cb, 0, null, injectedResponse)\n      const cancel = () => clearTimeout(cbTimer)\n      return {abort: cancel}\n    }\n\n    const request = fetch(options.url, fetchOpts)\n\n    // Let middleware know we're about to do a request\n    context.applyMiddleware('onRequest', {options, adapter, request, context})\n\n    request\n      .then(async (res) => {\n        const body = options.rawBody ? res.body : await res.text()\n\n        const headers = {} as Record<string, string>\n        res.headers.forEach((value, key) => {\n          headers[key] = value\n        })\n\n        cb(null, {\n          body,\n          url: res.url,\n          method: options.method!,\n          headers,\n          statusCode: res.status,\n          statusMessage: res.statusText,\n        })\n      })\n      .catch((err) => {\n        if (err.name == 'AbortError') return\n        cb(err)\n      })\n\n    return {abort: () => controller.abort()}\n  }\n\n  const bodyType = isStream(options.body) ? 'stream' : typeof options.body\n  if (\n    bodyType !== 'undefined' &&\n    bodyType !== 'stream' &&\n    bodyType !== 'string' &&\n    !Buffer.isBuffer(options.body)\n  ) {\n    throw new Error(`Request body must be a string, buffer or stream, got ${bodyType}`)\n  }\n\n  const lengthHeader: any = {}\n  if (options.bodySize) {\n    lengthHeader['content-length'] = options.bodySize\n  } else if (options.body && bodyType !== 'stream') {\n    lengthHeader['content-length'] = Buffer.byteLength(options.body)\n  }\n\n  // Make sure callback is not called in the event of a cancellation\n  let aborted = false\n  const callback = (err: Error | null, res?: MiddlewareResponse) => !aborted && cb(err, res)\n  context.channels.abort.subscribe(() => {\n    aborted = true\n  })\n\n  // Create a reduced subset of options meant for the http.request() method\n  let reqOpts: any = Object.assign({}, uri, {\n    method: options.method,\n    headers: Object.assign({}, lowerCaseHeaders(options.headers), lengthHeader),\n    maxRedirects: options.maxRedirects,\n  })\n\n  // Figure out proxying/tunnel options\n  const proxy = getProxyOptions(options)\n  const tunnel = proxy && tunneling.shouldEnable(options)\n\n  // Allow middleware to inject a response, for instance in the case of caching or mocking\n  const injectedResponse = context.applyMiddleware('interceptRequest', undefined, {\n    adapter,\n    context,\n  })\n\n  // If middleware injected a response, treat it as we normally would and return it\n  // Do note that the injected response has to be reduced to a cross-environment friendly response\n  if (injectedResponse) {\n    const cbTimer = setImmediate(callback, null, injectedResponse)\n    const abort = () => clearImmediate(cbTimer)\n    return {abort}\n  }\n\n  // We're using the follow-redirects module to transparently follow redirects\n  if (options.maxRedirects !== 0) {\n    reqOpts.maxRedirects = options.maxRedirects || 5\n  }\n\n  // Apply currect options for proxy tunneling, if enabled\n  if (proxy && tunnel) {\n    reqOpts = tunneling.applyAgent(reqOpts, proxy)\n  } else if (proxy && !tunnel) {\n    reqOpts = rewriteUriForProxy(reqOpts, uri, proxy)\n  }\n\n  // Handle proxy authorization if present\n  if (!tunnel && proxy && proxy.auth && !reqOpts.headers['proxy-authorization']) {\n    const [username, password] = proxy.auth.username\n      ? [proxy.auth.username, proxy.auth.password]\n      : proxy.auth.split(':').map((item: any) => qs.unescape(item))\n\n    const auth = Buffer.from(`${username}:${password}`, 'utf8')\n    const authBase64 = auth.toString('base64')\n    reqOpts.headers['proxy-authorization'] = `Basic ${authBase64}`\n  }\n\n  // Figure out transport (http/https, forwarding/non-forwarding agent)\n  const transport = getRequestTransport(reqOpts, proxy, tunnel)\n  if (typeof options.debug === 'function' && proxy) {\n    options.debug(\n      'Proxying using %s',\n      reqOpts.agent ? 'tunnel agent' : `${reqOpts.host}:${reqOpts.port}`,\n    )\n  }\n\n  // See if we should try to request a compressed response (and decompress on return)\n  const tryCompressed = reqOpts.method !== 'HEAD'\n  if (tryCompressed && !reqOpts.headers['accept-encoding'] && options.compress !== false) {\n    reqOpts.headers['accept-encoding'] =\n      // Workaround Bun not supporting brotli: https://github.com/oven-sh/bun/issues/267\n      typeof Bun !== 'undefined' ? 'gzip, deflate' : 'br, gzip, deflate'\n  }\n\n  let _res: http.IncomingMessage | undefined\n  const finalOptions = context.applyMiddleware(\n    'finalizeOptions',\n    reqOpts,\n  ) as FinalizeNodeOptionsPayload\n  const request = transport.request(finalOptions, (response) => {\n    const res = tryCompressed ? decompressResponse(response) : response\n    _res = res\n    const resStream = context.applyMiddleware('onHeaders', res, {\n      headers: response.headers,\n      adapter,\n      context,\n    })\n\n    // On redirects, `responseUrl` is set\n    const reqUrl = 'responseUrl' in response ? response.responseUrl : options.url\n\n    if (options.stream) {\n      callback(null, reduceResponse(res, reqUrl, reqOpts.method, resStream))\n      return\n    }\n\n    // Concatenate the response body, then parse the response with middlewares\n    concat(resStream, (err: any, data: any) => {\n      if (err) {\n        return callback(err)\n      }\n\n      const body = options.rawBody ? data : data.toString()\n      const reduced = reduceResponse(res, reqUrl, reqOpts.method, body)\n      return callback(null, reduced)\n    })\n  })\n\n  function onError(err: NodeJS.ErrnoException) {\n    // HACK: If we have a socket error, and response has already been assigned this means\n    // that a response has already been sent. According to node.js docs, this is\n    // will result in the response erroring with an error code of 'ECONNRESET'.\n    // We first destroy the response, then the request, with the same error. This way the\n    // error is forwarded to both the response and the request.\n    // See the event order outlined here https://nodejs.org/api/http.html#httprequesturl-options-callback for how node.js handles the different scenarios.\n    if (_res) _res.destroy(err)\n    request.destroy(err)\n  }\n\n  request.once('socket', (socket: NodeJS.Socket) => {\n    socket.once('error', onError)\n    request.once('response', (response) => {\n      response.once('end', () => {\n        socket.removeListener('error', onError)\n      })\n    })\n  })\n\n  request.once('error', (err: NodeJS.ErrnoException) => {\n    if (_res) return\n    // The callback has already been invoked. Any error should be sent to the response.\n    callback(new NodeRequestError(err, request))\n  })\n\n  if (options.timeout) {\n    timedOut(request, options.timeout)\n  }\n\n  // Cheating a bit here; since we're not concerned about the \"bundle size\" in node,\n  // and modifying the body stream would be sorta tricky, we're just always going\n  // to put a progress stream in the middle here. Note that\n  const {bodyStream, progress} = getProgressStream(options)\n\n  // Let middleware know we're about to do a request\n  context.applyMiddleware('onRequest', {options, adapter, request, context, progress})\n\n  if (bodyStream) {\n    bodyStream.pipe(request)\n  } else {\n    request.end(options.body)\n  }\n\n  return {abort: () => request.abort()}\n}\n\nfunction getProgressStream(options: any) {\n  if (!options.body) {\n    return {}\n  }\n\n  const bodyIsStream = isStream(options.body)\n  const length = options.bodySize || (bodyIsStream ? null : Buffer.byteLength(options.body))\n  if (!length) {\n    return bodyIsStream ? {bodyStream: options.body} : {}\n  }\n\n  const progress = progressStream({time: 16, length})\n  const bodyStream = bodyIsStream ? options.body : Readable.from(options.body)\n  return {bodyStream: bodyStream.pipe(progress), progress}\n}\n\nfunction getRequestTransport(\n  reqOpts: any,\n  proxy: any,\n  tunnel: any,\n): {\n  request: (\n    options: any,\n    callback: (response: http.IncomingMessage | (http.IncomingMessage & FollowResponse)) => void,\n  ) => http.ClientRequest | RedirectableRequest<http.ClientRequest, http.IncomingMessage>\n} {\n  const isHttpsRequest = reqOpts.protocol === 'https:'\n  const transports =\n    reqOpts.maxRedirects === 0\n      ? {http: http, https: https}\n      : {http: follow.http, https: follow.https}\n\n  if (!proxy || tunnel) {\n    return isHttpsRequest ? transports.https : transports.http\n  }\n\n  // Assume the proxy is an HTTPS proxy if port is 443, or if there is a\n  // `protocol` option set that starts with https\n  let isHttpsProxy = proxy.port === 443\n  if (proxy.protocol) {\n    isHttpsProxy = /^https:?/.test(proxy.protocol)\n  }\n\n  return isHttpsProxy ? transports.https : transports.http\n}\n", "export * from './middleware/agent/browser-agent'\nexport * from './middleware/base'\nexport * from './middleware/debug'\nexport * from './middleware/defaultOptionsProcessor'\nexport * from './middleware/defaultOptionsValidator'\nexport * from './middleware/headers'\nexport * from './middleware/httpErrors'\nexport * from './middleware/injectResponse'\nexport * from './middleware/jsonRequest'\nexport * from './middleware/jsonResponse'\nexport * from './middleware/mtls'\nexport * from './middleware/observable'\nexport * from './middleware/progress/browser-progress'\nexport * from './middleware/promise'\nexport * from './middleware/proxy'\nexport * from './middleware/retry/browser-retry'\nexport * from './middleware/urlEncoded'\n\nimport {agent} from './middleware/agent/browser-agent'\nimport {buildKeepAlive} from './middleware/keepAlive'\n/** @public */\nexport const keepAlive = buildKeepAlive(agent)\n", "import type {AgentOptions} from 'http'\nimport type {Middleware} from 'get-it'\n\nimport {NodeRequestError} from '../request/node-request'\n\ntype KeepAliveOptions = {\n  ms?: number\n  maxFree?: number\n\n  /**\n    How many times to retry in case of ECONNRESET error. Default: 3\n  */\n  maxRetries?: number\n}\n\nexport function buildKeepAlive(agent: (opts: AgentOptions) => Pick<Middleware, 'finalizeOptions'>) {\n  return function keepAlive(config: KeepAliveOptions = {}): any {\n    const {maxRetries = 3, ms = 1000, maxFree = 256} = config\n\n    const {finalizeOptions} = agent({\n      keepAlive: true,\n      keepAliveMsecs: ms,\n      maxFreeSockets: maxFree,\n    })\n\n    return {\n      finalizeOptions,\n      onError: (err, context) => {\n        // When sending request through a keep-alive enabled agent, the underlying socket might be reused. But if server closes connection at unfortunate time, client may run into a 'ECONNRESET' error.\n        // We retry three times in case of ECONNRESET error.\n        // https://nodejs.org/docs/latest-v20.x/api/http.html#requestreusedsocket\n        if (\n          (context.options.method === 'GET' || context.options.method === 'POST') &&\n          err instanceof NodeRequestError &&\n          err.code === 'ECONNRESET' &&\n          err.request.reusedSocket\n        ) {\n          const attemptNumber = context.options.attemptNumber || 0\n          if (attemptNumber < maxRetries) {\n            // Create a new context with an increased attempt number, so we can exit if we reach a limit\n            const newContext = Object.assign({}, context, {\n              options: Object.assign({}, context.options, {attemptNumber: attemptNumber + 1}),\n            })\n            // If this is a reused socket we retry immediately\n            setImmediate(() => context.channels.request.publish(newContext))\n\n            return null\n          }\n        }\n\n        return err\n      },\n    } satisfies Middleware\n  }\n}\n"],
  "mappings": "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",
  "names": ["agent", "_opts", "leadingSlash", "trailingSlash", "base", "baseUrl", "baseUri", "replace", "processOptions", "options", "test", "url", "join", "Object", "assign", "c", "s", "m", "h", "d", "w", "y", "plural", "ms", "msAbs", "n", "name", "isPlural", "Math", "round", "val", "type", "length", "str", "String", "match", "exec", "parseFloat", "toLowerCase", "isFinite", "long", "abs", "Error", "JSON", "stringify", "common", "env", "createDebug", "namespace", "prevTime", "namespacesCache", "enabledCache", "enableOverride", "debug", "args", "enabled", "self", "curr", "Number", "Date", "diff", "prev", "coerce", "unshift", "index", "format", "formatter", "formatters", "call", "splice", "formatArgs", "log", "apply", "useColors", "color", "selectColor", "extend", "destroy", "defineProperty", "enumerable", "configurable", "get", "namespaces", "set", "v", "init", "delimiter", "newDebug", "this", "toNamespace", "regexp", "toString", "substring", "default", "stack", "message", "disable", "names", "map", "skips", "enable", "i", "save", "split", "len", "push", "RegExp", "slice", "humanize", "require$$0", "console", "warn", "keys", "forEach", "key", "hash", "charCodeAt", "colors", "load", "exports", "module", "lastC", "storage", "setItem", "removeItem", "r", "getItem", "process", "DEBUG", "window", "__nwjs", "navigator", "userAgent", "document", "documentElement", "style", "WebkitAppearance", "firebug", "exception", "table", "parseInt", "$1", "localStorage", "localstorage", "warned", "j", "error", "SENSITIVE_HEADERS", "hasOwn", "prototype", "hasOwnProperty", "opts", "verbose", "defaultLogger", "debugIt", "shortCircuit", "requestId", "onRequest", "event", "method", "body", "headers", "redactSensitiveHeaders", "source", "redacted", "target", "indexOf", "onResponse", "res", "context", "reqId", "statusCode", "statusMessage", "parsed", "parse", "onError", "err", "_headers", "existing", "override", "HttpError", "ctx", "response", "request", "truncatedUrl", "msg", "trim", "httpErrors", "injectResponse", "inject", "interceptRequest", "prevValue", "isBuffer", "Buffer", "obj", "isObject", "o", "isPlainObject", "ctor", "constructor", "prot", "serializeTypes", "jsonRequest", "pipe", "Array", "isArray", "jsonResponse", "contentType", "shouldDecode", "force", "tryParse", "Accept", "mtls", "config", "ca", "cert", "finalizeOptions", "mtlsOpts", "actualGlobal", "globalThis", "global", "global$1", "observable", "Observable", "implementation", "onReturn", "channels", "observer", "subscribe", "progress", "next", "complete", "publish", "abort", "evt", "adapter", "xhr", "handleProgress", "stage", "percent", "lengthComputable", "loaded", "total", "upload", "onprogress", "promise", "PromiseImplementation", "Promise", "resolve", "reject", "cancel", "cancelToken", "then", "reason", "onlyBody", "setTimeout", "Cancel", "__CANCEL__", "CancelToken", "executor", "TypeError", "resolvePromise", "static", "token", "can", "proxy", "_proxy", "host", "isCancel", "value", "defaultShouldRetry", "_attempt", "isNetworkError", "getRetryDelay", "attemptNum", "pow", "random", "retry", "maxRetries", "retryDelay", "allowRetry", "shouldRetry", "max", "delay", "attemptNumber", "stream", "newContext", "encode", "data", "query", "URLSearchParams", "nest", "_value", "Set", "from", "append", "entries", "urlEncoded", "NodeRequestError", "req", "super", "code", "keepAlive", "maxFree", "keepAliveMsecs", "maxFreeSockets", "reusedSocket", "setImmediate"]
}
